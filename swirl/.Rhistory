library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydwf, 2)
head(mydf, 2)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(-5:20)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version == "3.1.1", country=="US")
?Comparison
filter(cran, r_version <= "3.0.2", country=="IN")
filter(cran, country =="US" | country=="IN")
filter(cran, size > 100500, r_os=="linux-gnu")
is.na( c(2, 5, NA, 10))
is(.na(c(3, 5, NA, 10)))
is.na(c(3, 5, NA, 10)))
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran2 <- select(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran2, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes=mean(size))
library(dplyr)
rm(cran2)
rm(cran3)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?
n
?n_distinct
submit()
tbl, pack_sum
tbl
pack_sum
quantile(pack_sum$count, probs=.99)
top_counts <- filter(pack_sum, count> 679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs=.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc((unique))
)
arrange(top_unique, desc(unique))
submit()
?chain
submit()
submit9)
submit()
reset()
submit()
library(tidyr)
students
?gather
gather(students, set, count, -grade)
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, col=sec_class, into=c("sex", "class"))
separate(data=res, col=sec_class, into=c("sex", "class"))
res
separate(res, sex_class, c("sex", "class"))
submit()
students3
?gather
submit()
?spread
submit()
extract_numeric("class5")
?mutate
submit()
students4
submit()
?unique
submit()
students4
submit()
passed
failed
passed <- mutate(passed, status="passed")
failed <- mutate(failed, status="failed")
?rbind_list
rbind_list(passed, failed)
sat
?contains
?select
?gather
?separate
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_date)
year(this_day)
wday(this_day)
wday(this_day, label=T)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("//192012")
mdy("1/9/2012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hmd("03:22:14")
hms("03:22:14")
dt2
ymd(dt2)
update(this_mment, hours=8, minutes=34, seconds=55)
update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
this_moment() <- now()
this_moment <- now()
this_moment <- update(this_moment, hours=10, minutes=16, seconds=0)
this_moment
nyc <- now("America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes=34, seconds=00)
depart <- update(depart, hours=17, minutes=34)
depart
depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(swirl)
rm(list=ls())
install_from_swirl("Statistical Inference")
swirl()
(1-3/36)
deck
1/52
52
4/52
0
(3+3+3+3)/52
2/51
1/2*1.6*.8
64%
.64
mypdf
integrate(mypdf, 0, 1.6)
.25
info()
sqrt(2)
.997*.001
.985*(1-.001)
(1-.985)*(1-.001)
(.997*.001)/((.997*.001)*(1-.985)*(1-.001))
(.997*.001)/( (.997*.001)+(1-.985)*(1-.001) )
(1+2+3+4+5+6)/6
expect_dice()
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5*(edh+edl)
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
smeans
mean(smeans)
dice_sqr
ex2_fair <- (dice_sqr * dice_fair)^2
ex2_fair <- sum(dice_sqr * dice_fair)
ex2_fair - 3.5
ex2_fair - 3.5^2
sum(dice_sqr * dice_high) - edh^2
sd(apply(matrix(rnorm(10000, 1000), 1, mean))
)
sd(apply(matrix(rnorm(10000), 1000), 1, mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(1000, runif(100)))
info()
bye
bye()
swirl()
sd(apply(matrix(runif(10000),1000),1,mean))'
''
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
choose(5,3)*.8^3 * (1-.8)^(5-3)
choose(5,3)*.8^3 * (1-.8)^(5-3)+choose(5,2)*.8^2 * (1-.8)^(5-2)+choose(5,1)*.8^1 * (1-.8)^(5-1)
(choose(5,3)*.8^3 * (.2)^(5-3))+(choose(5,2)*.8^2 * (.2)^(5-2))+(choose(5,1)*.8^1 * (.2)^(5-1))
( choose(5,1)*(.8)^1*(.2)(5-1) ) + ( choose(5,2)*(.8)^2*(.2)(5-2) ) + ( choose(5,3)*(.8)^3*(.2)(5-3) )
( choose(5,1)*(.8)^1*(.2)(5-1) )  + ( choose(5,2)*(.8)^2*(.2)(5-2) ) + ( choose(5,3)*(.8)^3*(.2)(5-3) )
( choose(5,1)*(.8)*.2(5-1) )
( choose(5,1)*(.8)*.2(5-1) ) )
choose(5,1)*(.8)*.2(5-1)
choose(5,1)*(.8)*.2*(5-1)
( choose(5,1)*(.8)^1*(.2)*(5-1) )  + ( choose(5,2)*(.8)^2*(.2)*(5-2) ) + ( choose(5,3)*(.8)^3*(.2)*(5-3) )
( choose(5,3)*(.8)^3*(.2)*(5-3) )  + ( choose(5,4)*(.8)^4*(.2)*(5-4) ) + ( choose(5,5)*(.8)^5*(.2)*(5-5) )
( choose(5,3)*(.8)^3*(.2)*(5-3) ) + ( choose(5,4)*(.8)^4*(.2)*(5-4) ) + ( choose(5,5)*(.8)^5*(.2)*(5-5) )
0.94208
?pbinom
pbinom(2, size=5, prob = .8, lower.tail=FALSE)
qnorm(prob=.1)
qnorm(.1)
0
qnorm(.975, mean=3, sd=2, lower.tail=TRUE)
1.96*2+3
pnorm(quantil=1200, mean=1020, sd=50, lower.tail=FALSE)
pnorm(quantile=1200, mean=1020, sd=50, lower.tail=FALSE)
?pnrom
pnorm(1200, mean=1020, sd=50, lower.tail=FALSE)
(1200-1020)/50
pnorm((1200-1020)/50)
pnorm((1200-1020)/50, lower.tail=FALSE)
qnorm(.75, mean=1020, sd=50, lower.tail=TRUE)
.53
ppois(3, mean=2.5*4)
ppois(3, 2.5*4)
?pbinom(.01, )
?pbinom(.01, 1000)
pbinom(.01, 1000)
pbinom(5, 1000, .01)
5/1000
ppois(5, lambda=5000)
ppois(5, .01*1000)
ppois(5, 1000*.01)
coinPlot(10)
coinPlot(10000)
qnorm(.95)
.6+c(-1,1)+qnorm(.975)*sqrt(.6*.4)/10
.6+c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.text(60, 100)$conf.int
binom.test(60, 100)$conf.int
mywald(.2)
ACCompar(20)
lamb <- 5/94.32
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5, 94.32)$conf
myplot(2)
myplot(20)
myplot2(2)
qt(.975, 2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2 - g1
mean(difference)
s<-sd(difference)
mn+c(-1,1)*qt(.975, 9)*s/sqrt(10)
t.test(difference)$conf.int
sp <- 7*132.86^2+20*127.44^2
sp <- 7*15.34^2+20*18.23^2
ns <- 27
sp<-sqrt(sp/ns)
(132.86-127.44)+c(-1,1)+qt(.95)*sp/sqrt(ns+2)
(132.86-127.44)+c(-1,1)+qt(.95, ns)*sp/sqrt(ns+2)
132.86-127.44+c(-1,1)*qt(.975, ns)*sp*sqrt(1/8+1/21)
sqrt( var(g1)/10-var(g2)/10)
sqrt( 9*var(g1)/18 + 9*var(g2)/18)
sp <- sqrt( 9*var(g1)/18 + 9*var(g2)/18)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
mn+c(-1,1)+qt(.95, 18)*sp*sqrt(1/10+1/10)
mn+c(-1,1)*qt(.975, 18)*sp*sqrt(1/10+1/10)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2, g1, paired=FALSE, var.equal=TRUE)$conf
?t.test
t.test(g2, g1, paired=TRUE)$conf
num<- (15.32^2/8+18.23^2/21)^2
num<- (15.34^2/8+18.23^2/21)^2
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
mydf <- num/den
127.44-132.86+c(-1,1)+qt(.975, mydf)*sqrt(15.34^2/8 + 18.23^2/21)
132.86-127.44+c(-1,1)+qt(.975, mydf)*sqrt(15.34^2/8 + 18.23^2/21)
132.86-127.44+c(-1,1)*qt(.975, mydf)*sqrt(15.34^2/8 + 18.23^2/21)
1
2
(32-30)/10/sqrt(16)
(32-30)/10/4
(32-30)/(10/sqrt(16))
15
qt(.95, 15)
dim(fs)
t.test(fs$sheight-fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
7
8
pt(2.5, 15, lower.tail=FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2, lower.tail=FALSE)
mybin
pbinom(6,8,prob=.5, lower.tail=FALSE)
pbinom(7,8,prob=.5)
ppoit(9, lambda = 5, lower.tail=FALSE)
ppois(9, lambda = 5, lower.tail=FALSE)
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z<-qnorm(.95)
pnorm(30+z, mean=30, lower.tail=FALSE)
pnorm(30+z, mean=32, lower.tail=FALSE)
pnorm(30+z, mean=32, sd=1, lower.tail=FALSE)
pnorm(30+z*2, mean=32, sd=2, lower.tail=FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type =
| "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2 , sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power=.8, n=26, sd=1)$delta
power.t.test(power=.8, n=26, sd=1, type="one.sample", alt="one.sided")$delta
power.t.test(power=.8, n=27, sd=1, type="one.sample", alt="one.sided")$delta
head(pValues,2)
head(pValues)
sum( pValues > .05 )
sum( pValues <.05)
padjust(pValues, method="bonferroni")
p.adjut(pValues, method="bonferroni")
p.adjust(pValues, method="bonferroni")
sum(p.adjust(pValues, method="bonferroni") < 0.05)
sum(p.adjust(pValues, method="BH") < 0.05)
tail(trueStatus)
table(pValues2<-.05, trueStatus)
table(pValues2<.05, trueStatus)
?
help
swirl()
table(pValues<.05, trueStatus)
pValues
pValues2
table(pValues2<.05, trueStatus)
24/500
table(p.adjust(pValues2, method="bonferroni")<.05, trueStatus)
table(p.adjust(pValues2, method="BH")<.05, trueStatus)
3.5
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh, nh*B, replace=TRUE)
resam <- matrix(sam, B, nh)
meds <- apple(resam 1, median)
meds <- apple(resam, 1, median)
meds <- apply(resam, 1, median)
median(meds) - median(fh)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians, c(.025, .975))
quantile(meds, c(.025, .975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
gropu
group
testStat
obs <- testStat(BCcounts, group)
obs
mean(Bdata$count) - mean(Cdata$count)
sample(group)
perms <- sapply(1 perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group))
)
mean(perms>obs)
testStat(DEcounts, group)
perms <- sapply(1: 10000, function(i) testStat(DEcounts, sample(group)))
