install.packages("shiny")
library(shiny)
runApp()
install.packages("UsingR")
runApp()
runApp(display.mode='showcase')
library(UsingR)
str(galton$child)
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='thecapacity',
token='EE8A7E4F2C2CBF327B2F66CD9062CA81',
secret='x8kNX7erV6nMyVKDquNdUYzNScq5Aw99n4Lp819b')
deployApp()
library(shiny)
deployApp()
shinyapps::deployApp()
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq!Hair, group="Eye", type="multiBarChart", data=subset(haireye, Sex == "Male"))
n1 <- nPlot(Freq ~ Hair, group="Eye", type="multiBarChart", data=subset(haireye, Sex == "Male"))
n1$save('fig/n1.html', cdn = TRUE)
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
?n1
?nPlot
n1
n1$srccode
data(iris)
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data=iris, color="Species", type="point")
r1$print
n1$print
load.package(rjson)
require(rjson)
data(economics, package="ggplot2")
econ <- transform(economics, date=as.character(date))
mPlot(x="date", y=c("psavert", "uempmed"), type="Line", data=econ)
?economics
library(googleVis)
install.packages("googleVis")
library(googleVis)
gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=600, height=400))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=600, height=400))
print(M, "chart")
plot(M)
library(slideify)
require(devtools)
install_github("slidify", "ramnathv")
install_github("ramnathv/slidify")
install_github("ramnathv/slidifyLibraries")
library(slidify)
demo(googleVis)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
?manipulate
dTable(airquality, sPaginationType = "full_numbers")
?dTable
?rCharts.dTable
??rCharts.dTable
??dTable
dTable(airquality, sPaginationType = "full_numbers")
runApp()
library(slideify)
library(slidify)
setwd("~/sandbox/datasciencecoursera/DevData_Products/CourseProj")
?read.table
treadmill_data <- read.csv("treadmill_conversions.csv")
head(treadmill_data)
names(treadmill_data)
names(treadmill_data) <- c("MPH", "Pace", "0p", "1p", "2p", "3p", "4p", "5p", "6p", "7p", "8p", "9p", "10p")
names(treadmill_data)
names(treadmill_data) <- c("MPH", "Pace", "0p", "1p", "2p", "3p", "4p", "5p", "6p", "7p", "8p", "9p", "10p")
lm(0p ~ MPH, treadmill_data)
lm(1p ~ MPH, treadmill_data)
lm( treadmill_data[0p] ~ treadmill_data[MPH] )
fit <- lm( treadmill_data$0p ~ treadmill_data$MPH )
names(treadmill_data) <- c("MPH", "Pace", "zero_p", "one_p", "two_p", "three_p", "four_p", "five_p", "six_p", "seven_p", "eight_p", "nine_p", "ten_p")
fit <- lm( treadmill_data$zero_p ~ treadmill_data$MPH )
str(treadmill_data)
treadmill_data <- read.csv("treadmill_conversions.csv")
str(treadmill_data)
treadmill_data <- read.csv("treadmill_conversions.csv")
str(treadmill_data)
treadmill_data <- read.csv("treadmill_conversions.csv", stringsAsFactors=FALSE)
str(treadmill_data)
rm(treadmill_data)
treadmill_data <- read.csv("treadmill_conversions.csv", stringsAsFactors=FALSE)
str(treadmill_data)
rm(treadmill_data)
treadmill_data <- read.csv("treadmill_conversions.csv", stringsAsFactors=FALSE)
str(treadmill_data)
treadmill_data$Incline <- as.factor(treadmill_data$Incline)
fit <- lm( AdjustedPace.hrs ~ MPH + Pace.hrs + Incline, treadmill_data)
fit
summary(fit)
summary(fit)$coef
summary(fit)
fit <- lm( AdjustedPace.hrs ~ MPH + Pace.hrs + Incline - 1, treadmill_data)
summary(fit)
rm(treadmill_data)
treadmill_data <- read.csv("treadmill_conversions.csv", stringsAsFactors=FALSE)
head(treadmill_data)
str(treadmill_data)
treadmill_data$Incline <- as.factor(treadmill_data$Incline)
fit <- lm( AdjustedPace.hrs ~ MPH + Pace.hrs + Incline - 1, treadmill_data)
summary(fit)
plot(fit)
runApp()
library(shinyapps)
runApp()
library(shiny)
runApp()
shiny::runApp()
str(treadmill_data)
plot(treadmill_data$MPH, fit)
plot(treadmill_data$MPH, treadmill_data$pace)
plot(treadmill_data$MPH, treadmill_data$Pace.hrs)
plot(fit)
plot(treadmill_data$MPH, treadmill_data$Pace.hrs)
abline(fit)
summary(fit)
?predict
predict(fit)
str(treadmill_data)
fit <- lm( AdjustedPace.hrs ~ MPH + Incline - 1, treadmill_data)
predict(fit, MPH=14, Inclinde=4)
head(predict(fit, MPH=14, Inclinde=4))
plot(treadmill_data$MPH, treadmill_data$Incline)
abline(fit)
summary(fit)
?predict
summary(fit)$Incline$9%
summary(fit)$coef
names(summary(fit)$coef)
class(summary(fit)$coef)
summary(fit)$coef
rm(treadmill_conversions)
rm(list=ls())
treadmill_data <- read.csv("treadmill_conversions.csv", stringsAsFactors=FALSE)
str(treadmill_data)
fit <- lm( AdjustedPace.hrs ~ MPH + Incline - 1, treadmill_data)
summary(fit)
predit(fit, MPH=4.3, Incline=.055)
predict(fit, MPH=4.3, Incline=.055)
plot(predict(fit, MPH=4.3, Incline=.055))
abline(fit)
plot(treadmill_data$MPH, treadmill_data$Incline)predict(fit, MPH=4.3, Incline=.055))
plot(treadmill_data$MPH, treadmill_data$Incline)
summary(fit)
plot(fit$coef)
fit$coef
fit$coef['MPH']
fit$coef['MPH'] * 1
class(fit$coef['MPH'])
abline(fit$coef['MPH'])
shiny::runApp()
fitted(fit)
plot(treadmill$MPH, fit)
plot(treadmill_data$MPH, fit)
anova(fit)
fit
predift(fit, MPH=5.5, incline=.03)
predict(fit, MPH=5.5, incline=.03)
plot(treadmill_data$MPH, predict(fit, MPH=5.5, incline=.03))
abline(fit)
shiny::runApp()
rm(treadmill_data)
treadmill_data <- read.csv("treadmill_conversions.csv", stringsAsFactors=FALSE)
treadmill_data$Incline <- as.factor(treadmill_data$Incline)
fit <- lm(AdjustedPace.hrs ~ MPH + Incline - 1, treadmill_data)
treadmill_data$MPH
shiny::runApp()
treadmill_data <- read.csv("treadmill_conversions.csv", stringsAsFactors=FALSE)
treadmill_data$Incline <- as.factor(treadmill_data$Incline)
fit <- lm(AdjustedPace.hrs ~ MPH + Incline - 1, treadmill_data)
plot(treadmill_data$MPH, predict(fit, input$speed, input$incline))
abline(fit)
summary(fit)
treadmill_data <- read.csv("treadmill_conversions.csv", stringsAsFactors=FALSE)
fit <- lm(AdjustedPace.hrs ~ MPH + Incline - 1, treadmill_data)
plot(treadmill_data$MPH, predict(fit, input$speed, input$incline))
predit(treadmill$data$MPH, fit)
plot(treadmill$data$MPH, fit)
plot(treadmill_data$MPH, fit)
plot(treadmill_data$MPH, 1)
plot(treadmill_data$MPH, c(1)
)
shiny::runApp()
summary(treadmill_data)
str(treadmill_data)
plot(treadmill_data$MPH, predict(fit, input$speed, input$incline))
plot(treadmill_data$MPH, predict(fit, MPH=5.5, incline=.03))
shiny::runApp()
fit
fit$MPH
coef(fit)MPH
coef(fit)$MPH
shiny::runApp()
fit$MPH
fit$coef
fit$coef['MPH']
shiny::runApp()
fit$coef['MPH']
shiny::runApp()
summary(fit)
fit <- lm(AdjustedPace.hrs ~ MPH + Incline - 1, treadmill_data)
summary(fit)
fit <- lm(AdjustedPace.hrs ~ MPH + Incline, treadmill_data)
summary(fit)
fit <- lm(AdjustedPace.hrs ~ MPH + Incline - 1, treadmill_data)
fit
summary(fit)
head(treadmill_data)
fit$coef['MPH']
fit$coef['MPH'] * 5.0
(1-fit$coef['MPH']) * 5.0
fit$coef['Incline']
(1-fit$coef['Incline']) * 5.0
(1-fit$coef['Incline'] + fit$coef['MPH']) * 5.0
(fit$coef['MPH']) * 5.0
(1-fit$coef['MPH']) * 5.0
(fit$coef['MPH']) + 5.0
summary(fit)
?predict
head(treadmill_data)
predict(fit, MPH=5.1, Incline=.3)
5+predict(fit, MPH=5.1, Incline=.3)
plot(treadmill_data$MPH,5+predict(fit, MPH=5.1, Incline=.3))
plot(fit)
fit_full <- lm(AdjustedPace.hrs ~ MPH + Incline, treadmill_data)
summary(fit_full)
summary(fit)
summary(fit_full)
head(treadmill_data)
fit <- lm(AdjustedPace.hrs ~ Pace.hrs + Incline - 1, treadmill_data)
plot(treadmill_data$Pace.hrs,fit$AdjustedPace.hrs)
str(treadmill_data)
treadmill_data <- read.csv("treadmill_conversions.csv", stringsAsFactors=FALSE)
str(treadmill_data)
treadmill_data$Incline <- as.factor(treadmill_data$Incline)
str(treadmill_data)
plot(Adjusted.MPH ~ MPH + Incline, treadmill_data)
summary(plot(Adjusted.MPH ~ MPH + Incline, treadmill_data))
plot(Adjusted.MPH ~ MPH + Incline, treadmill_data, color=Incline)
warnings(plot(Adjusted.MPH ~ MPH + Incline, treadmill_data, color=Incline))
library(ggplot2)
qplot(Adjusted.MPH ~ MPH + Incline, treadmill_data, color=Incline)
qplot(MPH, Adjusted.MPH, treadmill_data, color=Incline)
qplot(treadmill_data$MPH, treadmill_data$Adjusted.MPH, color=treadmill_data$Incline)
fit1 <- lm(AdjustedPace.hrs ~ Pace.hrs + Incline - 1, treadmill_data)
fit2 <- lm(AdjustedPace.hrs ~ Pace.hrs + Incline, treadmill_data)
qplot(treadmill_data$MPH, treadmill_data$Adjusted.MPH, color=treadmill_data$Incline) + geom_smooth(fit1)
qplot(treadmill_data$MPH, treadmill_data$Adjusted.MPH, color=treadmill_data$Incline) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = AdjustedPace.hrs ~ Pace.hrs + Incline)
qplot(treadmill_data$MPH, treadmill_data$Adjusted.MPH, color=treadmill_data$Incline) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = treadmill_data$AdjustedPace.hrs ~ treadmill_data$Pace.hrs + treadmill_data$Incline)
?plot
geom_smooth(method = "lm", se=FALSE, color="black",
formula = treadmill_data$AdjustedPace.hrs ~ treadmill_data$Pace.hrs + treadmill_data$Incline)
qplot(treadmill_data$MPH, treadmill_data$Adjusted.MPH, color=treadmill_data$Incline) +
geom_smooth(method = "lm", se=FALSE, color="black",
formula = treadmill_data$Adjusted.MPH ~ treadmill_data$MPH + treadmill_data$Incline)
rm(list=ls())
data <- read.csv("treadmill_conversions.csv", stringsAsFactors=FALSE)
data$Incline <- as.factor(data$Incline)
fit1 <- lm(Adjusted.MPH ~ MPH + Incline - 1, data)
fit2 <- lm(Adjusted.MPH ~ MPH + Incline, data)
summary(fit1)
summary(fit2)
summary(fit2)$coef['Incline0.1']
summary(fit2)$coef
predict(fit1,MPH=5.1, interval="confidence")
summary(data)
summary(fit2)
fit2$coef
class(fit2$coef)
names(fit2$coef)
df <- data.frame(names(fit2$coef), fit2$coef)
f
df
df$Incline0.01
df <- data.frame( names(fit2$coef)=fit2$coef)
?data.frame
df <- data.frame(fit2$coef, row.names=names(fit2$coef))
df
df$Inclinde0.01
df$Incline0.01
df
df[, "Incline0.01"]
df["Incline0.01", ]
df['MPH',]
df['MPH',0]
df['MPH',1]
class(df['MPH',1])
class(df['MPH',])
df
df['(Intercept)',1]
shiny::runApp()
fit1 <- lm(Adjusted.MPH ~ MPH + Incline - 1, data)
fit1$coef
df2 <- data.frame(fit1$coef, row.names=names(fit1$coef))
df2
names(df2)
row.names(df2)
row.names(df2)[2]
row.names(df2)[2] <- "Incline0.00"
row.names(df2)
row.names(df2)[12]
row.names(df2)[12] <- "Incline0.10"
row.names(df2)
?formatC
formatC(1, width=2)
formatC(1, width=2, flag=0)
formatC(10, width=2, flag=0)
formatC(0, width=2, flag=0)
shiny::runApp()
row.names(df2)
shiny::runApp()
df
shiny::runApp()
int(60/4.8)
60/4.8
floor(60/4.8)
60/4.5
60%/%4.5
60%/%4.8
60%%4.8
60%%4.8*60
60%/%4.8
60/4.8
?%%
2.4*60
2.4*4.8
60/4.8
floor(60/4.8)
(60/4.8)-floor(60/4.8)
((60/4.8)-floor(60/4.8))*60
shiny::runApp()
paste0("00:", "xx", ":", "yy")
paste0("00:", format(10, width=2, flag=0), ":", "yy")
paste0("00:", format(0, width=2, flag=0), ":", "yy")
paste0("00:", format("0", width=2, flag=0), ":", "yy")
paste0("00:", format(0, width=2, flag=0), ":", "yy")
?format
paste0("00:", format(0, width=2, flag=0, zero.print=TRUE), ":", "yy")
paste0("00:", format(0, width=2, flag=0, digits=2), ":", "yy")
format(0, width=2, flag=0, digits=2)
?formatC
formatC(0, width=2, flag=0, digits=2)
paste0("00:", "xx", ":", "yy")
formatC(floor(60 / est.MPH()), width=2, flag=0)
formatC(floor(60 / 4.8, width=2, flag=0)
)
formatC(floor(60 / 4.8), width=2, flag=0)
paste0("00:", formatC(floor(60 / 4.8), width=2, flag=0), ":", "yy")
formatC((60/4.8)-floor(60 / 4.8), width=2, flag=0)
formatC(60*((60/4.8)-floor(60 / 4.8)), width=2, flag=0)
shiny::runApp()
?round
shiny::runApp()
deployApp()
Thanks to technology, there is a prevalence of fitness trackers and a renewed focus on individual attainment and statistical tracking of endeavors, such as running trackers. This project attempts to bridge the divide between two factors of performance and training: (1) empirical data measurement, such as pace (distance/time) and predictability, such as transference of indoor treadmill workouts to outdoor performance (assuming a flat course and adjusting for factors such as wind resistance).
shiny::runApp()
* Some form of input (widget: textbox, radio button, checkbox, sider, ...)
shiny::runApp()
deployApp()
4. Almost Last Slide
Presentation for the Data Science Specialization of Johns Hopkins University, hosted by Coursera.
"Presentation for the Data Science Specialization of Johns Hopkins University, hosted by Coursera."
*Presentation for the Data Science Specialization of Johns Hopkins University, hosted by Coursera.*
Slide 1. Treadmill Conversions
1. Treadmill Conversions
Presentation on Treadmill Conversations in the Data Products class of the Data Science Specialization of Johns Hopkins University, hosted by Coursera.
Treadmill Conversions
Presentation on Treadmill Conversations in the Data Products class of the Data Science Specialization of Johns Hopkins University, hosted by Coursera.
date: 3/22/15
date: 03/22/15
date: today()
date: ```today()```
today()
date.today()
date: March 22nd 2015
date: March 22nd, 2015
author: thecapacity
========================================================
Utilizing data from [Hill Runner](http://www.hillrunner.com/training/tmillchart.php) this app allows users to predict outdoor performance, based on indoor treadmill settings for speed and incline/elevation.
1. Developing Data Products: Treadmill Conversion
========================================================
author: thecapacity
date: March 22nd, 2015
shiny::runApp()
deployApp()
library(pryr)
installpackages("pryr")
install.packages("pryr")
library(pryr)
ftype(predict)
ftype(dgamma)
ftupe(colSums)
ftype(colSums)
showMethods("show")
getMethod(show)
