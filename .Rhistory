for (num in id) {
in_f <- read.csv(paste0(directory, "/", sprintf("%03d", num), ".csv"))
nobs <- nrows(complete.cases(in_f))
data[num,2] <- nobs
}
data
}
complete(directory, 1)
complete <- function(directory, id = 1:332) {
data <- data.frame( seq(id) )
for (num in id) {
in_f <- read.csv(paste0(directory, "/", sprintf("%03d", num), ".csv"))
nobs <- nrow(complete.cases(in_f))
data[num,2] <- nobs
}
data
}
complete(directory, 1)
complete <- function(directory, id = 1:332) {
data <- data.frame( seq(id) )
for (num in id) {
in_f <- read.csv(paste0(directory, "/", sprintf("%03d", num), ".csv"))
nobs <- length(complete.cases(in_f))
data[num,2] <- nobs
}
data
}
complete(directory, 1)
complete <- function(directory, id = 1:332) {
data <- data.frame()
for (num in id) {
in_f <- read.csv(paste0(directory, "/", sprintf("%03d", num), ".csv"))
nobs <- length(complete.cases(in_f))
data[num,2] <- nobs
}
data
}
complete(directory, 1)
complete <- function(directory, id = 1:332) {
data <- data.frame(id)
for (num in id) {
in_f <- read.csv(paste0(directory, "/", sprintf("%03d", num), ".csv"))
nobs <- length(complete.cases(in_f))
data[num,2] <- nobs
}
data
}
complete(directory, 1)
complete <- function(directory, id = 1:332) {
data <- data.frame(id, nobs=c(0))
for (num in id) {
in_f <- read.csv(paste0(directory, "/", sprintf("%03d", num), ".csv"))
nobs <- length(complete.cases(in_f))
data[num,2] <- nobs
}
data
}
complete(directory, 1)
num = 1
in_f <- read.csv(paste0(directory, "/", sprintf("%03d", num), ".csv"))
complete.cases(in_f)
in_f[complete.cases(in_f)]
?complete.cases
in_f[complete.cases(in_f),]
nrow(in_f[complete.cases(in_f),])
length(in_f[complete.cases(in_f),])
nobs <- nrow(in_f[complete.cases(in_f)],)
complete <- function(directory, id = 1:332) {
data <- data.frame(id, nobs=c(0))
for (num in id) {
in_f <- read.csv(paste0(directory, "/", sprintf("%03d", num), ".csv"))
nobs <- nrow(in_f[complete.cases(in_f)],)
data[num,2] <- nobs
}
data
}
complete(directory, 1)
complete <- function(directory, id = 1:332) {
data <- data.frame(id, nobs=c(0))
for (num in id) {
in_f <- read.csv(paste0(directory, "/", sprintf("%03d", num), ".csv"))
nobs <- nrow(in_f[complete.cases(in_f),])
data[num,2] <- nobs
}
data
}
complete(directory, 1)
complete(directory, c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:332) {
data <- data.frame(id=length(id), nobs=c(0))
for (num in id) {
in_f <- read.csv(paste0(directory, "/", sprintf("%03d", num), ".csv"))
nobs <- nrow(in_f[complete.cases(in_f),])
data[num,2] <- nobs
}
data
}
complete(directory, c(2, 4, 8, 10, 12))
i <- c(2, 4, 8, 10, 12)
length(i)
i
d<- data.frame(id=length(i), nobs=c(0))
d
complete <- function(directory, id = 1:332) {
data <- data.frame(id=seq(1,length(id)), nobs=c(0))
for (num in id) {
in_f <- read.csv(paste0(directory, "/", sprintf("%03d", num), ".csv"))
nobs <- nrow(in_f[complete.cases(in_f),])
data[num,2] <- nobs
}
data
}
d<- data.frame(id=seq(1,length(i)), nobs=c(0))
d
d.nrows
nrows(d)
rows(d)
d
d[1] = c(10, 20)
d[1,] = c(10, 20)
d
complete <- function(directory, id = 1:332) {
data <- data.frame(id=seq(1,length(id)), nobs=c(0))
for (num in seq(1, length(id))) {
in_f <- read.csv(paste0(directory, "/", sprintf("%03d", num), ".csv"))
nobs <- nrow(in_f[complete.cases(in_f),])
data[num,] <- id[num], nobs
}
data
}
complete <- function(directory, id = 1:332) {
data <- data.frame(id=seq(1,length(id)), nobs=c(0))
for (num in seq(1, length(id))) {
in_f <- read.csv(paste0(directory, "/", sprintf("%03d", num), ".csv"))
nobs <- nrow(in_f[complete.cases(in_f),])
data[num,] <- id[num], nobs
}
data
}
complete <- function(directory, id = 1:332) {
data <- data.frame(id=seq(1,length(id)), nobs=c(0))
for (num in seq(1, length(id))) {
in_f <- read.csv(paste0(directory, "/", sprintf("%03d", num), ".csv"))
nobs <- nrow(in_f[complete.cases(in_f),])
data[num,] <- id[num], nobs
}
data
}
complete <- function(directory, id = 1:332) {
data <- data.frame(id=seq(1,length(id)), nobs=c(0))
for (num in seq(1, length(id))) {
in_f <- read.csv(paste0(directory, "/", sprintf("%03d", num), ".csv"))
nobs <- nrow(in_f[complete.cases(in_f),])
data[num,] <- c(id[num], nobs)
}
data
}
complete(directory, c(2, 4, 8, 10, 12))
complete(directory, 2)
complete(directory, 1)
complete(directory, 30:25)
complete(directory, 25)
in_f
complete.cases(in_f)
sum(complete.cases(in_f))
complete <- function(directory, id = 1:332) {
data <- data.frame(id=seq(1,length(id)), nobs=c(0))
for (num in seq(1, length(id))) {
in_f <- read.csv(paste0(directory, "/", sprintf("%03d", num), ".csv"))
##nobs <- nrow(in_f[complete.cases(in_f),])
##nobs <- nrow(na.omit(in_f))
nobs <- sum(complete.cases(in_f))
data[num,] <- c(id[num], nobs)
}
data
}
complete(directory, 25)
in_f <- read.csv(paste0(directory, "/", sprintf("%03d", 25), ".csv"))
sum(complete.cases(in_f))
complete <- function(directory, id = 1:332) {
data <- data.frame(id=seq(1,length(id)), nobs=c(0))
for (num in seq(1, length(id))) {
in_f <- read.csv(paste0(directory, "/", sprintf("%03d", id[num]), ".csv"))
nobs <- sum(complete.cases(in_f))
data[num,] <- c(id[num], nobs)
}
data
}
complete(directory, 25)
complete(directory, c(2, 4, 8, 10, 12))
complete(directory, 30:25)
complete(directory, 3)
directory
files <- list.files(directory)
files
?corr
?correlation
?cor
f
diretory
directory
f[0]
files[0]
files[1]
in_f <- read.csv(paste0(directory,"/", files[1]))
cc <- complete.cases(in_f)
sum(cc)
cor(f['sultate'][cc])
cor(in_f['sultate'][cc])
cor(in_f)
cor(in_f[cc])
in_f[cc]
cc
in_f['sulfites'][cc]
in_f['nitrate'][cc]
head(in_f)
in_f['nitrate']
in_f['nitrate'][cc]
in_f[cc]['nitrate']
head(in_f)
head(in_f['nitrate]'])
head(in_f['nitrate]')
head(in_f['nitrate'])
head(in_f['nitrate'][cc])
head(in_f['nitrate'][complte.cases(in_f)])
head(in_f['nitrate'][complte.cases(in_f['nitrate'])])
head(in_f['nitrate'][complete.cases(in_f['nitrate'])])
cor(in_f, use="complete.obs", method="pearson")
cor(in_f['nitrate'], use="complete.obs", method="pearson")
cor(in_f['nitrate'], use="complete.obs")
cc
sum(cc)
cor(in_f, use="complete.obs")
in_f[cc]
cc
in_f[!cc]
in_f['sulfate']
in_f['sulfate'][cc]
in_f['sulfate'][cc,]
in_f['sulfate'][,cc]
in_f['sulfate'][cc]
in_f['sulfate'][,cc]
in_f['sulfate'][cc,]
cor(in_f['sulfate'][cc,])
cor(in_f[cc,])
cor(in_f[cc,]['sulfate']
)
cor(in_f[cc,])
cor(in_f[cc,]['nitrate'])
in_f
in_f[cc,]
in_f[cc,]['sulfate']
in_f[cc,]['nitrate']
corr <- function(directory, threshold = 0) {
data <- vector()
files <- list.files(directory)
for (f in files) {
in_f <- read.csv(paste0(directory, "/", f))
cc <- complete.cases(in_f)
if ( sum(cc) > threshold) {
data <- append(data, cor(in_f[cc,]['sulfate'], in_f[cc,]['sulfate']) )
}
data
}
cr <- corr(directory, 150)
head(cr)
summary(cr)
len(cr)
length(cr)
cr <- corr(directory, 5000)
length(cr)
in_f[cc,]['sulfate']
in_f[cc,][['sulfate']]
corr <- function(directory, threshold = 0) {
data <- vector()
files <- list.files(directory)
for (f in files) {
in_f <- read.csv(paste0(directory, "/", f))
cc <- complete.cases(in_f)
if ( sum(cc) > threshold) {
data <- append(data, cor(in_f[cc,][['sulfate']], in_f[cc,][['nitrate']]) )
}
data
}
cr <- corr(directory, 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
cr <- corr(directory, 400)
head(cr)
cr <- corr(directory)
length(cr)
summary(cr)
in_f
in_f[cc,]
in_f[cc,]['sulfate']
head(in_f[cc,]['sulfate'])
head(in_f[cc,][['sulfate']])
type(in_f[cc,][['sulfate']])
class(in_f[cc,][['sulfate']])
class(in_f[cc,]['sulfate'])
## makeCacheMatrix: This function creates a special 'matrix' object
##                 that can cache its inverse.
## cacheSolve: This function computes the inverse of the special 'matrix'
##                 returned by makeCacheMatrix above. If the inverse has already been
##                 calculated (and the matrix has not changed), then the cachesolve
##                 should retrieve the inverse from the cache.
## Computing the inverse of a square matrix can be done with the solve function in R.
## For example, if X is a square invertible matrix, then solve(X) returns its inverse.
## Function builds the psuedo-matrix object, which is really a list of functions to:
##  1. set the matrix value
##  2. get the matrix value
##  3. set the matrix inverse value
##  4. get the matrix inverse value
makeCacheMatrix <- function(m = matrix()) {
m_inverse <- NULL
set <- function(new_m) {
m <<- new_m
m_inverse <<- NULL
}
get <- function() m
setinv <- function(m_inv) m_inverse <<- m_inv
getinv <- function() m_inverse
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Calculates the inverse of the special "matrix" created with makeCacheMatrix()
## Tt first checks to see if the matrix inverse has already been calculated.
## If so, it gets the value from the cache and skips the computation.
## Otherwise, it calculates the data and sets the value in the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x' either via cache or computation
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
c_inv <- solve(x, ...)
x$setinv(c_inv)
c_inv
}
x <- makeCacheMatrix()
cacheSolve(x)
m1 <- matrix(3,3)
m1
x <- makeCacheMatrix(m1)
cacheSolve(x)
?matrix
matrix(1:9, nrow=3, ncol=3)
m1 <- matrix(1:9, nrow=3, ncol=3)
solve(m1)
?solve
m1 <- matrix(1:25, nrow=5, ncol=5)
solve(m1)
m1
c <- rbind(c(1, -1/4), c(-1/4, 1))
c
solve(c)
m1 <- makeCacheMatrix(c)
cacheSolve(m1)
m1
## makeCacheMatrix: This function creates a special 'matrix' object
##                 that can cache its inverse.
## cacheSolve: This function computes the inverse of the special 'matrix'
##                 returned by makeCacheMatrix above. If the inverse has already been
##                 calculated (and the matrix has not changed), then the cachesolve
##                 should retrieve the inverse from the cache.
## Computing the inverse of a square matrix can be done with the solve function in R.
## For example, if X is a square invertible matrix, then solve(X) returns its inverse.
## Function builds the psuedo-matrix object, which is really a list of functions to:
##  1. set the matrix value
##  2. get the matrix value
##  3. set the matrix inverse value
##  4. get the matrix inverse value
makeCacheMatrix <- function(m = matrix()) {
m_inverse <- NULL
set <- function(new_m) {
m <<- new_m
m_inverse <<- NULL
}
get <- function() m
setinv <- function(m_inv) m_inverse <<- m_inv
getinv <- function() m_inverse
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Calculates the inverse of the special "matrix" created with makeCacheMatrix()
## Tt first checks to see if the matrix inverse has already been calculated.
## If so, it gets the value from the cache and skips the computation.
## Otherwise, it calculates the data and sets the value in the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x' either via cache or computation
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
c_inv <- solve(data, ...)
x$setinv(c_inv)
c_inv
}
cacheSolve(m1)
c <- rbind(c(1, -1/4), c(-1/4, 1))
?gl
library(datasets)
data(iris)
?iris
dim(iris)
sep(iris)
str(iris)
mean(iris$virginica[Sepal.Length])
mean(iris[Sepal.Length]$virginica)
iris['Sepal.Length']
str(iris)
iris['Species']
iris['Species'$virginica]
iris['Species']$virginica
iris['Species']['virginica']
str(iris['Species'])
print(iris['Species'])
dimnames(iris)
iris['Sepal.Width']
mean(iris['Sepal.Width'])
mean(iris[['Sepal.Width']])
iris['virginica']
str(iris)
iris[ iris['Species'] == 'virginica']
iris[ iris['Species'] == 'virginica']['Sepal.Length']
iris['Sepal.Length'][ iris['Species'] == 'virginica']
mean(iris['Sepal.Length'][ iris['Species'] == 'virginica'])
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
length(tapply(mtcars$cyl, mtcars$mpg, mean))
with(mtcars, tapply(mpg, horsepower, mean))
str(mtcars)
with(mtcars, tapply(mpg, hp, mean))
with(mtcars, tapply(hp, cyl, mean))
abs(82.63636-209.21429)
debug(ls)
ls
exit()
return()
debug(ls)
ls()
set.seed(20)
x<- rnorm(100)
y<- rnorm(100, 0, 2)
z<-.5+2*x+y
summary(z)
plot(x,z)
set.seed(1)
sample(1:10)
length(sample(1:10))
summaryRprof()
Rprof(1:10)
?~
?
x
set.seed(1)
rpois(5, 2)
?rnorm
?qpois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
x
summary(x)
e
summary(e)
?rnorm
?rbinom
y
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
x1 <- rbinorm(100)
x1 <- rbinom(100)
x1 <- rbinom(1:100)
x1 <- rnorm(1:100)
x2 <- rnorm(1:100)
fit <- lm(y ~ x1 + x2)
len(x1)
length(x1)
length(x2)
fit <- lm(y ~ x + e)
Rprof(NULL)
Rprof(fit)
Rprof()
fit <- lm(y ~ x + e)
Rprof(NULL)
summaryRprof()
set.seed(1)
rpois(5, 2)
?download.file
?normalize
